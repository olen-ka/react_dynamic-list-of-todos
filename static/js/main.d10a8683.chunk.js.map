{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","components/LoadingError/LoadingError.jsx","App.jsx","index.js"],"names":["TodoList","state","input","select","filter","All","Completed","todo","completed","Active","handleChange","event","setState","target","name","value","this","props","todos","selectUser","selectedUserId","filteredTodos","title","toLowerCase","includes","className","type","onChange","map","key","id","readOnly","userId","onClick","React","Component","CurrentUser","user","loadData","prevProps","fetch","then","response","json","data","clearSelectedUser","undefined","color","height","width","timeout","email","phone","LoadingError","App","hasLoadingError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d10a8683.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport propTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    input: '',\n    select: 'All',\n  }\n\n  filter = {\n    All: () => true,\n    Completed: todo => todo.completed,\n    Active: todo => !todo.completed,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { input, select } = this.state;\n    const filteredTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(input.toLowerCase())\n    )\n    && this.filter[select](todo));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            type=\"text\"\n            name=\"input\"\n            value={input}\n            className=\"TodoList__input\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"select\"\n            value={select}\n            className=\"TodoList__input\"\n            onChange={this.handleChange}\n          >\n            <option>All</option>\n            <option>Active</option>\n            <option>Completed</option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                className={\n                  `TodoList__item ${todo.completed\n                    ? 'TodoList__item--checked'\n                    : 'TodoList__item--unchecked'}`\n                }\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                {selectedUserId === todo.userId ? (\n                  <button\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectUser(0)}\n                  >\n                    User&nbsp;#\n                    {todo.id}\n                  </button>\n                ) : (\n                  <button\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectUser(todo.userId)}\n                  >\n                    User&nbsp;#\n                    {todo.id}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: propTypes.arrayOf(propTypes.shape({\n    id: propTypes.number.isRequired,\n    userId: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    completed: propTypes.bool.isRequired,\n  })).isRequired,\n  selectUser: propTypes.func.isRequired,\n  selectedUserId: propTypes.number.isRequired,\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport Loader from 'react-loader-spinner';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.state.user.id) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUsers(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    if (user.id === undefined) {\n      return (\n        <div className=\"loader\">\n          <Loader\n            type=\"Circles\"\n            color=\"purple\"\n            height={120}\n            width={120}\n            timeout={3000}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: ${user.id}`}</span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={clearSelectedUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: propTypes.number.isRequired,\n  clearSelectedUser: propTypes.func.isRequired,\n};\n","const TODOS_URL = 'https://mate-api.herokuapp.com/todos';\nconst USERS_URL = 'https://mate-api.herokuapp.com/users';\n\nexport const getTodos = () => fetch(TODOS_URL)\n  .then(response => response.json())\n  .then(todo => todo.data);\n\nexport const getUsers = userId => fetch(`${USERS_URL}/${userId}`)\n  .then(response => response.json())\n  .then(todo => todo.data);\n","import React from 'react';\n\nexport const LoadingError = () => (\n  <div className=\"error\">\n    Unable to render a list at this time. Please reload the page and try again.\n  </div>\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { LoadingError } from './components/LoadingError';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    hasLoadingError: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({\n        todos: todos.filter(todo => todo.userId !== null),\n      });\n    } catch (error) {\n      this.setState({\n        hasLoadingError: true,\n      });\n    }\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({\n      selectedUserId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId, hasLoadingError } = this.state;\n    const { selectUser, clearSelectedUser } = this;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            selectUser={selectUser}\n          />\n          {hasLoadingError && <LoadingError />}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}